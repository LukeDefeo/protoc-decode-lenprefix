#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Erik Weathers : https://github.com/erikdw
#
# Wrapper around protoc's --decode option, providing support for
# length-prefixed messages (which are not directly supported by `protoc`).
#
# Our definition of 'length-prefixed protobuf messages':
#
#   To frame protobuf messages when writing to files or TCP streams,
#   you can prefix each message with a fixed-size header containing
#   the length in bytes of the message.
#
#   See:
#     https://developers.google.com/protocol-buffers/docs/techniques?csw=1#streaming
#     http://eli.thegreenplace.net/2011/08/02/length-prefix-framing-for-protocol-buffers
#
# Not only can a single length-prefixed message be decoded, but an input
# stream containing a sequence of such messages is supported.
#
# Just like protoc, this allows the user to specify:
#   * the proto source files (bare arguments after the options, just like protoc)
#   * the proto import paths (-I/--proto_path, just like protoc)
#   * the MESSAGE_TYPE to use for decoding (--decode, just like protoc)
#
# Note that this requires user to know the MESSAGE_TYPE of the messages to be
# decoded, just like the `protoc --decode` option being wrapped.
#
# Example usage for decoding a Mesos task.updates file:
#
#   protoc-decode-lenprefix -d mesos.internal.StatusUpdateRecord \
#                           -I MESOS_CODE/src -I MESOS_CODE/include \
#                           MESOS_CODE/src/messages/messages.proto \
#                           < task.updates

from __future__ import print_function
from subprocess import Popen, PIPE, STDOUT
import argparse
import struct
import sys
import os

# TODO: Support config file for specifying CLI arguments (to make repeated usage terser).
#  Use ConfigParser for this:
#       http://stackoverflow.com/a/5826167/318428

PROTOC_COMMAND='protoc'

def error(*objs):
    print("ERROR:", *objs, file=sys.stderr)

def ensure_protoc_available():
    for path in os.environ["PATH"].split(os.pathsep):
        exe = os.path.join(path, PROTOC_COMMAND)
        if os.path.isfile(exe) and os.access(exe, os.X_OK):
            return
    error('%s command not found, please install the protobuf package' %
        PROTOC_COMMAND)
    sys.exit(1)

def print_message(args, message_num, message_bytes):
    cmd = [PROTOC_COMMAND]
    cmd.append('--decode=' + args.decode)
    for proto_path in args.proto_path:
        cmd.append('-I' + proto_path)
    for proto_file in args.PROTO_FILE:
        cmd.append(proto_file)
    try:
        p = Popen(cmd, stdout=PIPE, stdin=PIPE, stderr=PIPE)
        comm_data = p.communicate(input=message_bytes)
        stdout_data = comm_data[0]
        stderr_data = comm_data[1]
    except Exception as e:
        error('Exception `%s` when executing `%s`' % (e, ' '.join(cmd)))
        sys.exit(1)
    if stdout_data:
        print("---- message #%d ----\n%s" % (message_num, stdout_data))
    if stderr_data:
        print("---- message #%d ==> ERROR: % returned error output ----\n%s" %
            (message_num, PROTOC_COMMAND, stderr_data))

def main(args):
    ensure_protoc_available()
    try:
        message_len_header = sys.stdin.read(args.header_size)
        message_num = 0
        while message_len_header != "":
            message_len = struct.unpack('i', message_len_header)[0]
            message_bytes = sys.stdin.read(message_len)
            message_num += 1
            print_message(args, message_num, message_bytes)
            message_len_header = sys.stdin.read(args.header_size)
    except Exception as e:
        error('Exception `%s` when parsing standard input' % (e))
        sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
                description='Decodes length-prefixed protobuf messages passed via stdin.')
    parser.add_argument(
        'PROTO_FILE',
        nargs='+',
        help='Protobuf definition files, typically suffixed with ".proto". ' \
             'Pass a list of such files by separating them with spaces.')
    parser.add_argument(
        '-I', '--proto_path',
        action='append',
        help='Specify the directory in which to search for imports.  May be ' \
             'specified multiple times; directories will be searched in order. ' \
             'If not given, the current working directory is used.')
    parser.add_argument(
        '-d', '--decode',
        required=True,
        help='Read a binary message of the given type from standard input and ' \
             'write it in text format to standard output.  The message type ' \
             'must be defined in PROTO_FILES or their imports.')
    parser.add_argument(
        '-H', '--header_size',
        type=int,
        default=4,
        help="Size in bytes of the length-prefix header for each message.")
    args = parser.parse_args()
    main(args)
